/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicacompiladores;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import static java.time.Clock.system;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import practicacompiladores.bean.InfoEstado;


/**
 *
 * @author Cami
 */
public class VentanaInicial extends javax.swing.JFrame {

    /**
     * Creates new form VentanaInicial
     */
    public VentanaInicial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAutomata = new javax.swing.JTable();
        iniciarProceso = new javax.swing.JButton();
        grafica1 = new javax.swing.JPanel();
        lblNotificacion = new javax.swing.JLabel();
        jScrollBar1 = new javax.swing.JScrollBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAutomataDeterministico = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaAutomata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", "A", "B", "0"},
                {"B", "C", "D", "0"},
                {"C", "A,B", "D", "1"},
                {"D", "B", "C", "0"}
            },
            new String [] {
                "Estados", "0", "1", "A(1)/R(0)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaAutomata);

        iniciarProceso.setText("Iniciar");
        iniciarProceso.setName("iniciarProceso"); // NOI18N
        iniciarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarProcesoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout grafica1Layout = new javax.swing.GroupLayout(grafica1);
        grafica1.setLayout(grafica1Layout);
        grafica1Layout.setHorizontalGroup(
            grafica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        grafica1Layout.setVerticalGroup(
            grafica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 221, Short.MAX_VALUE)
        );

        tablaAutomataDeterministico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaAutomataDeterministico);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iniciarProceso)
                        .addGap(292, 292, 292))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(24, 24, 24)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addComponent(lblNotificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(grafica1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)))
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNotificacion)
                        .addGap(5, 5, 5)
                        .addComponent(iniciarProceso)
                        .addGap(18, 18, 18)
                        .addComponent(grafica1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 305, Short.MAX_VALUE))
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int cantidadEstadosIniciales = 4; //Estados ingresados al inicio del proceso. Desarrollo de Puerta
    int cantidadCaracteresEntrada = 3; //Esto es la suma de dos columnas estaticas y la cantidad de caracteres de entrada
    int ubicacionInicialPorFila = 1;
    /* La fila posicion 0 ya ha sido asignada y fue asignada por defecto. 
       La reorganizacion del automata toma la primera fila del automata original
       Esta variable es usada en la etapa de reorganziacion de los estados
       para convertir el automata a deterministico. */
    int ubicacionInicialPorColumna = 1;
    /* La columna posicion 0 siempre es la misma(Estados), es decir, es est√°tica, por lo tanto, 
    se empeiza a contar a partir de la 1*/
    
    private void iniciarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarProcesoActionPerformed
        lblNotificacion.setText("");
        HashMap<Boolean, String> validadorEstados = validarEstadosIngresados();
        if(validadorEstados.containsKey(true)){
            if(validarCamposTablaAcepRech()){
                if(validarAutomataNoDeterminista()){
                    List<InfoEstado> listaEstadosGenerados = generarGrafica(grafica1.getGraphics());
                    listaEstadosGenerados.forEach(estadoGenerado -> {
                        System.out.println("Estados generados graficamente: ".concat(estadoGenerado.getEstado())
                                                                             .concat(". Posicion x: ")
                                                                             .concat(String.valueOf(estadoGenerado.getCoordenadaX())
                                                                             .concat(". Posicion y: ")
                                                                             .concat(String.valueOf(estadoGenerado.getCoordenadaY()))));
                    });
                } else {
                    grafica1.update(grafica1.getGraphics());
                    lblNotificacion.setText("Este automata no es NO determinista");
                }
                convertirDeNoDeterministicoADeterministico();
            }
        }else {
            lblNotificacion.setText(validadorEstados.values().toString());
        }
    }//GEN-LAST:event_iniciarProcesoActionPerformed

    public void convertirDeNoDeterministicoADeterministico(){
        List<String> nuevosEstadosDeterminista = obtenerNuevaListaEstadosDeterministicos();
        
    }
    
    public List<String> obtenerNuevaListaEstadosDeterministicos(){
        
        String[][] tablaAutomataDeterministicoCalculo = new String[cantidadEstadosIniciales][cantidadCaracteresEntrada]; // TODO afecta el desarrollo de puerta
        tablaAutomataDeterministicoCalculo[0][0] = "";
        List<String> auxNuevosEstadosDeterminista = new ArrayList<>();
        for(int fila = 0; fila <= 0; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                if(tablaAutomataDeterministicoCalculo[0][0].equals("")){
                    String estadoPartida = tablaAutomata.getValueAt(fila, 0).toString();
                    tablaAutomataDeterministicoCalculo[0][0] = estadoPartida;
                    auxNuevosEstadosDeterminista.add(estadoPartida);
                }
                
                String estadoIngresado = tablaAutomata.getValueAt(fila, columna).toString();
                String[] estadosSeparadosPorComa = estadoIngresado.split(",");
                if(estadosSeparadosPorComa.length > 1){
                    estadoIngresado = String.join("", estadosSeparadosPorComa);
                }
                if(!auxNuevosEstadosDeterminista.contains(estadoIngresado)){
                    //tablaAutomataDeterministicoCalculo[fila+1][0] = estadoIngresado;
                    auxNuevosEstadosDeterminista.add(estadoIngresado);
                }
                tablaAutomataDeterministicoCalculo[fila][columna] = estadoIngresado;
            }
        }
        auxNuevosEstadosDeterminista.forEach(auxNuevoEstado -> {
            if(!validarEstadoEnMatrizDeterministico(tablaAutomataDeterministicoCalculo, auxNuevoEstado)){
                tablaAutomataDeterministicoCalculo[ubicacionInicialPorFila][0] = auxNuevoEstado;
                List<String> valoresRecuperadosPorEstado = recuperarValoresIngresadosDelAutomataIncial(auxNuevoEstado);
                valoresRecuperadosPorEstado.forEach(valorRecuperado -> {
                    String[] estadosSeparadosPorComa = valorRecuperado.split(",");
                    if(estadosSeparadosPorComa.length > 1){
                        valorRecuperado = String.join("", estadosSeparadosPorComa);
                    }
                    if(!auxNuevosEstadosDeterminista.contains(valorRecuperado)){
                        tablaAutomataDeterministicoCalculo[ubicacionInicialPorFila+1][0] = valorRecuperado;
                        auxNuevosEstadosDeterminista.add(valorRecuperado); // posiblemente error
                    }
                    tablaAutomataDeterministicoCalculo[ubicacionInicialPorFila][ubicacionInicialPorColumna] = valorRecuperado;
                    ubicacionInicialPorColumna++; //Ubica los valores consecutivamente, de acuerdo a como los recuper√≥
                });
                ubicacionInicialPorFila ++;
            }
        });
        auxNuevosEstadosDeterminista.forEach(x -> {
            System.out.print(x + ", ");
        });
        System.out.print("-------");
        String resul = "";
        for(int filaA = 0; filaA <= cantidadEstadosIniciales - 1; filaA++){
            resul= resul + "\n";
            for (int columnaA = 0; columnaA < cantidadCaracteresEntrada; columnaA++) {
                resul = resul + tablaAutomataDeterministicoCalculo[filaA][columnaA] + ", ";
            }
        }
        System.out.println(resul);
        return auxNuevosEstadosDeterminista;
    }
    
    public List<String> recuperarValoresIngresadosDelAutomataIncial(String estadoReferencia){
        List<String> valoresRecuperadosPorEstado = new ArrayList<>();
        for(int fila = 0; fila < cantidadEstadosIniciales -1; fila++){
            String estadoActual = tablaAutomata.getValueAt(fila,0).toString();
            if(estadoActual.equals(estadoReferencia)){
                for(int columa = 1; columa < cantidadCaracteresEntrada; columa++){
                    System.out.println(fila + " - " + columa);
                    System.out.println(tablaAutomata.getValueAt(fila,columa));
                    valoresRecuperadosPorEstado.add(tablaAutomata.getValueAt(fila,columa).toString());
                }
                return valoresRecuperadosPorEstado;
            }
        }
        return valoresRecuperadosPorEstado;
    }
    
    public Boolean validarEstadoEnMatrizDeterministico(String[][] tablaAutomataDeterministicoCalculo, String estado){
        for(int fila = 0; fila < cantidadEstadosIniciales; fila++){
            String estadoActual = tablaAutomataDeterministicoCalculo[fila][0];
            if(estadoActual != null && estadoActual.equals(estado)){
                return true;
            }
        }
        return false;
    }
    
    public List<InfoEstado> generarGrafica(Graphics graph){                                          
        grafica1.update(graph);
        //Se define ubicacion en eje X de los ovalos(izquierdo y derecho)
        int posicionOvaloEnEjeXColumnaDerecha = 195;
        int posicionOvaloEnEjeXColumnaIzquierda = 25;
        int posicionEntradaEnEjeXColumnaDerecha = posicionOvaloEnEjeXColumnaDerecha - (posicionOvaloEnEjeXColumnaDerecha / 7);
        int posicionEntradaEnEjeXColumnaIzquierda = posicionOvaloEnEjeXColumnaIzquierda*2;
        //Se obtiene la lista de estados
        List<String> estados = obtenerListaEstados();
        List<InfoEstado> estadosInfo = new ArrayList<>();
        int posicionY = 90; //Distancia entre filas de ovalos
        //Se pintan los estados por orden ingresados y por par
        for (int i = 0; i < estados.size(); i+=2) {
            /* Se registran las coordenadas de cada estado para saber su 
               ubicacion en la grafica */
            generarOvalo(graph, posicionOvaloEnEjeXColumnaIzquierda, posicionY, 50, 50, estados.get(i), true);
            estadosInfo.add(new InfoEstado( posicionOvaloEnEjeXColumnaIzquierda, posicionY, // Ubicacion del ovalo izquierdo
                                            estados.get(i),
                                            posicionEntradaEnEjeXColumnaIzquierda, posicionY+10, // Ubicacion del punto de salida
                                            73, posicionY+10));// Ubicacion del punto de entrada
            generarOvalo(graph, posicionOvaloEnEjeXColumnaDerecha, posicionY, 50, 50, estados.get(i+1), true);
            estadosInfo.add(new InfoEstado( posicionOvaloEnEjeXColumnaDerecha, posicionY, // Ubicacion del ovalo derecho
                                            estados.get(i+1), 
                                            posicionEntradaEnEjeXColumnaDerecha, posicionY+10,  // Ubicacion del punto de salida
                                            posicionOvaloEnEjeXColumnaDerecha, posicionY+5));// Ubicacion del punto de entrada
            posicionY = posicionY * 2;
        }
        /* Se empieza a recorrer la tabla de estados ingresados para trazar 
           las transiciones */
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                String caracterEntrada = obtenerCaracterEntrada(columna);
                String estadoPartida = tablaAutomata.getValueAt(fila, 0).toString();
                InfoEstado infoEstadoPartida = obtenerInfoEstado(estadosInfo, estadoPartida);
                String estadoIngresado = tablaAutomata.getValueAt(fila, columna).toString();
                String[] estadosSeparadosPorComa = estadoIngresado.split(",");
                if(estadosSeparadosPorComa.length > 1){
                    for(String estadoSeparadoPorComa: estadosSeparadosPorComa){
                        System.out.println("Estado partida:"
                                            .concat(estadoPartida)
                                            .concat(" Caracter de entrada: ")
                                            .concat(caracterEntrada)
                                            .concat(" Estado ingresado: ")
                                            .concat(estadoSeparadoPorComa));
                        InfoEstado infoEstadoIngresado = obtenerInfoEstado(estadosInfo, estadoSeparadoPorComa);
                        generarFlecha(graph,  infoEstadoPartida, infoEstadoIngresado, caracterEntrada);
                    }
                } else {
                    System.out.println("Estado partida:"
                                        .concat(estadoPartida)
                                        .concat(" Caracter de entrada: ")
                                        .concat(caracterEntrada)
                                        .concat(" Estado ingresado: ")
                                        .concat(estadoIngresado));
                    InfoEstado infoEstadoIngresado = obtenerInfoEstado(estadosInfo, estadoIngresado);
                    generarFlecha(graph,  infoEstadoPartida, infoEstadoIngresado, caracterEntrada);
                }
            }
        }
        return estadosInfo;
    }
    
    public void generarFlecha(Graphics graph, InfoEstado infoEstadoPartida, InfoEstado infoEstadoIngresado,
                              String caracterEntrada){
        System.out.println(
                            "Estado:" + infoEstadoIngresado.getEstado()+
                            "\n Coordenada X:" + infoEstadoIngresado.getCoordenadaX()+
                            "\n Coordenada Y:" + infoEstadoIngresado.getCoordenadaY() +
                            "\n Coordenada X salida:" + infoEstadoIngresado.getCoordenadaXsalida()+
                            "\n Coordenada Y salida:" + infoEstadoIngresado.getCoordenadaYsalida()+
                            "\n Coordenada X entrada:" + infoEstadoIngresado.getCoordenadaXentrada() + 
                            "\n Coordenada Y entrada:" + infoEstadoIngresado.getCoordenadaYentrada());
        graph.drawLine(infoEstadoPartida.getCoordenadaXsalida(), infoEstadoPartida.getCoordenadaYsalida(), 
                        infoEstadoIngresado.getCoordenadaXentrada()-25, infoEstadoIngresado.getCoordenadaYentrada()-25);
        generarOvalo(graph, infoEstadoIngresado.getCoordenadaXentrada()-18, infoEstadoIngresado.getCoordenadaYentrada()-18, 
                     20, 20, caracterEntrada, false);
    }
    
    private String obtenerCaracterEntrada(int columna) {
        JTableHeader titulos = tablaAutomata.getTableHeader();
        TableColumnModel columnas = titulos.getColumnModel();
        return  columnas.getColumn(columna).getHeaderValue().toString();
    }
    
    private InfoEstado obtenerInfoEstado(List<InfoEstado> estadosInfo, String estadoIngresado) {
        InfoEstado infoEstado = new InfoEstado();
        estadosInfo.stream().filter(estadoInfo -> estadoInfo.getEstado().equals(estadoIngresado))
                            .forEach(estadoInfo -> {
            infoEstado.setEstado(estadoInfo.getEstado());
            infoEstado.setCoordenadaY(estadoInfo.getCoordenadaY());
            infoEstado.setCoordenadaX(estadoInfo.getCoordenadaX());
            infoEstado.setCoordenadaXentrada(estadoInfo.getCoordenadaXentrada());
            infoEstado.setCoordenadaYentrada(estadoInfo.getCoordenadaYentrada());
            infoEstado.setCoordenadaXsalida(estadoInfo.getCoordenadaXsalida());
            infoEstado.setCoordenadaYsalida(estadoInfo.getCoordenadaYsalida());
        });
        return infoEstado;
    }
    
    public void generarOvalo(Graphics graph, int x, int y, int ovalWidth, int ovalHeight, String estado, boolean isEstado){
        int centerX = x, centerY = y;

        if(isEstado){
            graph.setColor(Color.BLACK);
        } else {
            graph.setColor(Color.BLUE);
        }
        graph.drawOval(centerX-ovalWidth/2, centerY-ovalHeight/2,
                   ovalWidth, ovalHeight);

        FontMetrics fm = graph.getFontMetrics();
        double textWidth = fm.getStringBounds(estado, graph).getWidth();
        graph.setColor(Color.BLACK);
        graph.drawString(estado, (int) (centerX - textWidth/2),
                           (int) (centerY + fm.getMaxAscent() / 2));
    }
    
    public HashMap<Boolean, String> validarEstadosIngresados(){
        HashMap<Boolean, String> validador = new HashMap<>();
        List<String> listaEstados = obtenerListaEstados();
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) != null && !tablaAutomata.getValueAt(fila, columna).equals("")){
                    String[] estados = tablaAutomata.getValueAt(fila, columna).toString().split(",");
                    for(String estado : estados){
                        if(!listaEstados.contains(estado)){
                            validador.put(false, "El estado ingresado en la fila: " + (fila+1) + " y en la columna: " + (columna+1) + " no pertenece a la columna de estados.");
                            return validador;
                        }
                    }
                }
            }
        }
        validador.put(true, "");
        return validador;
    }
    
    public List<String> obtenerListaEstados(){
        List<String> listaEstados = new ArrayList<>();
        for(int fila = 0; fila <= 3; fila++){
            listaEstados.add(tablaAutomata.getValueAt(fila, 0).toString());
        }
        return listaEstados;
    }
    
    public Boolean validarAutomataNoDeterminista(){
        Boolean validador = false;
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) != null && !tablaAutomata.getValueAt(fila, columna).equals("")){
                    String[] resultado = tablaAutomata.getValueAt(fila, columna).toString().split(",");
                    if(resultado.length > 1){
                        validador = true;
                    }
                }
            }
        }
        return validador;
    }
    
    public Boolean validarCamposTablaAcepRech(){
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 3; columna <= 3; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) == null || tablaAutomata.getValueAt(fila, columna).equals("")){
                    lblNotificacion.setText("En la fila: " + (fila + 1) + ", con la columna: " + (columna + 1) + " esta vacio");
                    return false;
                }
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaInicial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel grafica1;
    private javax.swing.JButton iniciarProceso;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblNotificacion;
    private javax.swing.JTable tablaAutomata;
    private javax.swing.JTable tablaAutomataDeterministico;
    // End of variables declaration//GEN-END:variables


}
