/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicacompiladores;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import static java.time.Clock.system;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFrame;


/**
 *
 * @author Cami
 */
public class VentanaInicial extends javax.swing.JFrame {

    /**
     * Creates new form VentanaInicial
     */
    public VentanaInicial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAutomata = new javax.swing.JTable();
        iniciarProceso = new javax.swing.JButton();
        grafica1 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaAutomata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", "A", "B", "0"},
                {"B", "C", "D", "0"},
                {"C", "A,B", "D", "1"},
                {"D", "B", "C", "0"}
            },
            new String [] {
                "Estados", "0", "1", "A(1)/R(0)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaAutomata);

        iniciarProceso.setText("Iniciar");
        iniciarProceso.setName("iniciarProceso"); // NOI18N
        iniciarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarProcesoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout grafica1Layout = new javax.swing.GroupLayout(grafica1);
        grafica1.setLayout(grafica1Layout);
        grafica1Layout.setHorizontalGroup(
            grafica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        grafica1Layout.setVerticalGroup(
            grafica1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 221, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(grafica1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iniciarProceso)
                .addGap(321, 321, 321))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(iniciarProceso)
                .addGap(18, 18, 18)
                .addComponent(grafica1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarProcesoActionPerformed
        HashMap<Boolean, String> validadorEstados = validarEstadosIngresados();
        if(validadorEstados.containsKey(true)){
            if(validarCamposTablaAcepRech()){
                if(validarAutomataNoDeterminista()){
                    System.out.println("Es no determinista");
                    generarGrafica(grafica1.getGraphics());
                } else {
                    System.out.println("Este automata no es NO determinista");
                }
            }
        }else {
            System.out.println(validadorEstados.values());
        }
    }//GEN-LAST:event_iniciarProcesoActionPerformed

    public void generarGrafica(Graphics graph){
        List<String> estados = obtenerListaEstados();
        for (int i = 1; i <= estados.size(); i++) {
            if(i%2 == 0){
                graph.drawOval(i * 10, i * 20, 40, 40);
                graph.setColor(Color.red);
                graph.drawString("a", 35, 35);
            } else {
                graph.drawOval(i * 20 , i* 10, 10, 10);
                graph.setColor(Color.red);
                graph.drawString("a", 35, 35);
            }
        }
    }
    
    public HashMap<Boolean, String> validarEstadosIngresados(){
        HashMap<Boolean, String> validador = new HashMap<>();
        List<String> listaEstados = obtenerListaEstados();
        System.out.println(listaEstados);
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) != null && !tablaAutomata.getValueAt(fila, columna).equals("")){
                    String[] estados = tablaAutomata.getValueAt(fila, columna).toString().split(",");
                    for(String estado : estados){
                        if(!listaEstados.contains(estado)){
                            validador.put(false, "El estado ingresado en la fila: " + (fila+1) + " y en la columna: " + (columna+1) + " no pertenece a la columna de estados.");
                            return validador;
                        }
                    }
                }
            }
        }
        validador.put(true, "");
        return validador;
    }
    
    public List<String> obtenerListaEstados(){
        List<String> listaEstados = new ArrayList<>();
        for(int fila = 0; fila <= 3; fila++){
            listaEstados.add(tablaAutomata.getValueAt(fila, 0).toString());
        }
        return listaEstados;
    }
    
    public Boolean validarAutomataNoDeterminista(){
        Boolean validador = false;
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 1; columna <= 2; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) != null && !tablaAutomata.getValueAt(fila, columna).equals("")){
                    String[] resultado = tablaAutomata.getValueAt(fila, columna).toString().split(",");
                    if(resultado.length > 1){
                        validador = true;
                    }
                }
            }
        }
        return validador;
    }
    
    public Boolean validarCamposTablaAcepRech(){
        for(int fila = 0; fila <= 3; fila++){
            for (int columna = 3; columna <= 3; columna++) {
                if (tablaAutomata.getValueAt(fila, columna) == null || tablaAutomata.getValueAt(fila, columna).equals("")){
                    System.out.println("En la fila: " + (fila + 1) + ", con la columna: " + (columna + 1) + " esta vacio");
                    return false;
                }
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaInicial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel grafica1;
    private javax.swing.JButton iniciarProceso;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAutomata;
    // End of variables declaration//GEN-END:variables
}
